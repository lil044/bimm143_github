---
title: "Lab 14 Thu 2.20 - RNA Seq Analysis Mini-Project"
author: "Jessica Le (PID: A17321021)"
format: pdf
toc: true
---

## Background 

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

> Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1. Their results and others indicate that HOXA1 is required for lung fibroblast and HeLa cell cycle progression. In particular their analysis show that "loss of HOXA1 results in significant expression level changes in thousands of individual transcripts, along with isoform switching events in key regulators of the cell cycle". For our session we have used their Sailfish gene-level estimated counts and hence are restricted to protein-coding genes only.

## Data Import 

```{r}
counts <- read.csv("GSE37704_featurecounts.csv", row.names=1)
head(counts)
```

```{r}
colData <- read.csv("GSE37704_metadata.csv")
head(colData)
```

## Inspect and tidy data 

Does the `counts` columns match the `colData` rows? 

```{r}
ncol(counts)
colData$id
```
```{r}
nrow(colData)
names(colData)
```

No, the `counts` column does not match the `colData` rows. The fix here looks to be removing the first column from "counts". 

> Q1. Remove the troublesome first column from countData.

```{r}
countData <- counts[,-1]
head(countData)
```
Check for matching countData and colData. 

```{r}
colnames(countData) == colData$id
```

How many genes in total? 

```{r}
nrow(countData)
```

> Q2. Filter to remove zero count genes(rows where there are zero counts in all columns). How many genes are left? 

```{r}
to.keep.inds <- rowSums(countData > 0)
new.counts <- countData[to.keep.inds,]
nrow(new.counts)
```

## Setup for DESeq 

```{r}
#/ message: false
library(DESeq2)
```

Setup input object for DESeq
```{r}
library(DESeq2)
dds = DESeqDataSetFromMatrix(countData=countData,
                             colData=colData,
                             design=~condition)
dds = DESeq(dds)
```

## Run DESeq

```{r}
res=results(dds)
```

> Q3. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```

```{r}
head(res)
```

## Volcano plot of results 

```{r}
plot( res$log2FoldChange, -log(res$padj) )
```
> Q4. Improve this plot by adding color and axis labels. 

```{r}
mycols <- rep("gray", nrow(res))
mycols[abs(res$log2FoldChange) > 2] <- "red"
inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"
```

```{r}
library(ggplot2)

ggplot(res) + 
  aes(log2FoldChange, -log(padj)) + 
  geom_point(col=mycols) + 
  geom_vline(xintercept=c(-2,2), col="pink") + 
  geom_hline(yintercept=0.01, col="purple") + 
  labs(x="Log2(FoldChange)", y="-Log(P-value)")
  
```

## Gene annotation
```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

> Q5. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     key=rownames(res), 
                     keytype="ENSEMBL", 
                     column="SYMBOL")
res$genename <- mapIds(org.Hs.eg.db,
                     key=rownames(res), 
                     keytype="ENSEMBL", 
                     column="GENENAME")
res$entrez <- mapIds(org.Hs.eg.db,
                     key=rownames(res), 
                     keytype="ENSEMBL", 
                     column="ENTREZID")

head(res, 10)
```

> Q7. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```

## Pathway Analysis 

```{r}
library(pathview)
```

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```
```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

Now lets look at the object returned from gage().

```{r}
attributes(keggres)
```

```{r}
# Look at the first few down (less) pathways
head(keggres$less)
```

Now, let's try out the pathview() function from the pathview package to make a pathway plot with our RNA-Seq expression results shown in color.

To begin with lets manually supply a pathway.id (namely the first part of the "hsa04110 Cell cycle") that we could see from the print out above.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

![](hsa04110.pathview.png)

You can play with the other input arguments to pathview() to change the display in various ways including generating a PDF graph. For example:

```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```

Now, let's process our results a bit more to automagicaly pull out the top 5 upregulated pathways, then further process that just to get the pathway IDs needed by the pathview() function. We'll use these KEGG pathway IDs for pathview plotting below.

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

![](hsa04740.pathview.png)

![](hsa04640.pathview.png)
![](hsa00140.pathview.png)
![](hsa04630.pathview.png)
![](hsa04976.pathview.png)
> Q8. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

```{r}
keggrespathways.down <- rownames(keggres$less)[1:5]
keggresids = substr(keggrespathways.down, start=1, stop=8)
keggresids
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

![](hsa04110.pathview.png)
![](hsa03030.pathview.png)
![](hsa03013.pathview.png)
![](hsa04114.pathview.png)
![](hsa03440.pathview.png)

## Gene Ontology (GO)

We can also do a similar procedure with gene ontology. Similar to above, go.sets.hs has all GO terms. go.subs.hs is a named list containing indexes for the BP, CC, and MF ontologies. Let’s focus on BP (a.k.a Biological Process) here.

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

## Reactome Analysis 

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", 
            row.names=FALSE, col.names=FALSE, quote=FALSE)
```

> Q9 and 10. What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

The most significant pathway is Cell Cycle, Mitotic with an "Entities p-value" of 1.69e-4. Yes, the most significant pathways listed using the website do  match the previous KEGG results since the top result for the KEGG results was also the cell cycle, but there is a different p-value of 7.08e-6. The difference in the two methods is that gene ontology is a more standardized compared to KEGG which provides a deeper analysis of gene function and interaction. In other words, KEGG considers how genes interact within complex biological pathways instead of only considering gene function at a basic level like GO. 
